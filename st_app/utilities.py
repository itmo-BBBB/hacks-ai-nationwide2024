import streamlit as st
import pydeck as pdk
import pandas as pd
import numpy as np
import json

def dataset_discalaimer():
    if st.session_state['dataset_type']=='unauthorized':
        st.caption("–î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω—ã –ø–æ –¥–∞—Ç–∞—Å–µ—Ç—É —Å –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
    elif st.session_state['dataset_type']=='authorized':
        st.caption("–î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω—ã –ø–æ –¥–∞—Ç–∞—Å–µ—Ç—É —Å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
    else:
        st.caption("–î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω—ã –ø–æ –¥–∞—Ç–∞—Å–µ—Ç—É —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
def no_data_alert():
    st.card("üòû –≠—Ç–æ—Ç —á–∞—Ä—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –¥–∞—Ç–∞—Å–µ—Ç–µ")
def exmaple_map(chart_data, weight):
    st.pydeck_chart(
        pdk.Deck(
            map_style=None,
            initial_view_state=pdk.ViewState(
                latitude=55.7558,  # Latitude for Moscow, Russia
                longitude=37.6173,  # Longitude for Moscow, Russia
                zoom=5,  # Adjust the zoom level
                pitch=50  # Adjust the pitch for 3D view
            ),
            layers=[
                pdk.Layer(
                    "HexagonLayer",
                    data=chart_data,
                    get_position="[lon, lat]",
                    getElevationWeight=weight,  # Use 'entries' column for height
                    elevation=weight,  # Extrusion height based on 'entries'
                    getColorWeight=weight,  # Color based on the 'entries' column
                    colorRange=[
                        [255, 255, 178],  # Light color for low entries
                        [254, 204, 92],
                        [253, 141, 60],
                        [240, 59, 32],
                        [189, 0, 38]  # Darker color for high entries
                    ],
                    radius=50000,
                    elevation_scale=500,
                    elevation_range=[100, 1000],
                    pickable=True,
                    extruded=True,
                ),
                pdk.Layer(
                    "ScatterplotLayer",
                    data=chart_data,
                    get_position="[lon, lat]",
                    get_color="[200, 30, 0, 160]",
                    get_radius=200,
                ),
            ],
        )
    )
def show_data_info():
    st.write("–ö–æ–ª–æ–Ω–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ")
    description = {
        "event_timestamp": "–í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª —Å –≤–∏–¥–µ–æ.",
        "region": "–†–µ–≥–∏–æ–Ω, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—ã–ª —Å–¥–µ–ª–∞–Ω –∑–∞–ø—Ä–æ—Å.",
        "ua_device_type": "–¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø (–º–æ–±–∏–ª—å–Ω–æ–µ, –¥–µ—Å–∫—Ç–æ–ø –∏ —Ç.–¥.).",
        "ua_client_type": "–¢–∏–ø –∫–ª–∏–µ–Ω—Ç–∞, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—ã–π –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±—Ä–∞—É–∑–µ—Ä, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ).",
        "ua_os": "–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Windows, macOS, Android).",
        "ua_client_name": "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞ –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è).",
        "total_watchtime": "–û–±—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏–¥–µ–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.",
        "rutube_video_id": "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–∏–¥–µ–æ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ Rutube.",
        "viewer_uid": "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑—Ä–∏—Ç–µ–ª—è, –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.",
        "authorized": "–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ—Ç).",
        "title": "–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ.",
        "category": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è, –∫ –∫–æ—Ç–æ—Ä–æ–π –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –≤–∏–¥–µ–æ.",
        "duration": "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.",
        "author_id": "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–≤—Ç–æ—Ä–∞ –≤–∏–¥–µ–æ.",
        "age": "–í–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
        "sex": "–ü–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º—É–∂—Å–∫–æ–π –∏–ª–∏ –∂–µ–Ω—Å–∫–∏–π).",
        "age_class": "–ö–ª–∞—Å—Å –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 18-24, 25-34 –∏ —Ç.–¥.).",
        "videos_per_day": "–°–∫–æ–ª—å–∫–æ –≤–∏–¥–µ–æ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å–º–æ—Ç—Ä–µ–ª –∑–∞ –¥–µ–Ω—å",
        "video_count":"–°–∫–æ–ª—å–∫–æ –≤–∏–¥–µ–æ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å–º–æ—Ç—Ä–µ–ª –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è"
    }

    description_df = pd.DataFrame(list(description.items()), columns=["Column", "Description"])
    available_columns = st.session_state['data'].columns
    description_df = description_df[description_df['Column'].isin(available_columns)]
    st.dataframe(description_df)


def add_coordinates(data, coordinates_file="region_coordinates.json"):
    # Load the coordinates from the JSON file
    with open(coordinates_file, 'r') as file:
        region_coordinates = json.load(file)

    # Define a function to get latitude and longitude from the region name
    def get_lat_long(region_name):
        coordinates = region_coordinates.get(region_name)
        if coordinates:
            return coordinates['latitude'], coordinates['longitude']
        else:
            return None, None

    # Apply the function to the 'region' column and create two new columns for latitude and longitude
    data['lat'], data['lon'] = zip(*data['region'].apply(get_lat_long))

    return data